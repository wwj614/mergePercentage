import unittest

import numpy as np
import os
import csv

from cumulativeCurve import CumulativeCurve


def cumulativeCurve_eq(a,b):
    if a==b : return True
    if a.__class__ != b.__class__ : return False 
    if a._N != b._N : return False 
    if ((max(abs(a._bin-b._bin)) < 1E-5) and
        (max(abs(a._pb -b._pb)) < 1E-5) and
        (max(abs(a._cnt-b._cnt)) < 1E-5) ): return True        
    return False   
        
class cumulativeCurveTest(unittest.TestCase):
    def setUp(self):
        x=[1,2,3,4,5,5,5,8,9,10]
        y=[11,21,31,41,51,61,81,81,81,101]
        self.pb=np.hstack((range(0,101,1),[0.01,0.1,0.5,99.5,99.9,99.99],[0.27,4.55,95.45,99.73]))
        self.pb.sort()
        bin0=np.array([13518.0, 15635.97, 18877.75, 20417.245, 21604.5, 22941.0, 24358.0, 25250.0, 25960.0, 26270.0, 26512.0, 26999.0, 27444.5, 27841.0, 28201.5, 28523.0, 28818.5, 29101.0, 29346.0, 29596.0, 29834.0, 30067.0, 30299.5, 30507.0, 30716.0, 30920.0, 31117.0, 31305.0, 31489.0, 31663.0, 31832.0, 31996.0, 32156.5, 32329.0, 32486.0, 32638.0, 32793.0, 32943.0, 33093.0, 33235.0, 33380.0, 33522.0, 33668.0, 33818.0, 33954.0, 34099.0, 34238.0, 34378.0, 34515.5, 34653.0, 34792.0, 34926.0, 35066.0, 35206.0, 35347.0, 35471.0, 35608.0, 35751.0, 35878.0, 36023.0, 36155.0, 36290.0, 36432.5, 36572.0, 36715.0, 36848.0, 36987.0, 37125.0, 37266.0, 37403.0, 37546.0, 37695.0, 37846.0, 38011.0, 38162.0, 38320.0, 38479.0, 38647.0, 38807.5, 38969.0, 39133.0, 39309.0, 39490.0, 39670.0, 39847.0, 40039.0, 40236.0, 40435.0, 40656.0, 40871.0, 41087.0, 41313.0, 41565.0, 41836.0, 42129.0, 42415.0, 42730.0, 43063.0, 43435.5, 43853.0, 44337.5, 44585.0, 44907.0, 45635.0, 46618.0, 48034.5, 49318.25, 50497.78999999998, 52162.99999999994, 55997.01999999973, 58616.0])
        cnt0=np.array([0.0, 7.705, 77.05, 208.035, 385.25, 770.5, 1541.0, 2311.5, 3082.0, 3505.775, 3852.5, 4623.0, 5393.5, 6164.0, 6934.5, 7705.0, 8475.5, 9246.0, 10016.5, 10787.0, 11557.5, 12328.0, 13098.5, 13869.0, 14639.5, 15410.0, 16180.5, 16951.0, 17721.5, 18492.0, 19262.5, 20033.0, 20803.5, 21574.0, 22344.5, 23115.0, 23885.5, 24656.0, 25426.5, 26197.0, 26967.5, 27738.0, 28508.5, 29279.0, 30049.5, 30820.0, 31590.5, 32361.0, 33131.5, 33902.0, 34672.5, 35443.0, 36213.5, 36984.0, 37754.5, 38525.0, 39295.5, 40066.0, 40836.5, 41607.0, 42377.5, 43148.0, 43918.5, 44689.0, 45459.5, 46230.0, 47000.5, 47771.0, 48541.5, 49312.0, 50082.5, 50853.0, 51623.5, 52394.0, 53164.5, 53935.0, 54705.5, 55476.0, 56246.5, 57017.0, 57787.5, 58558.0, 59328.5, 60099.0, 60869.5, 61640.0, 62410.5, 63181.0, 63951.5, 64722.0, 65492.5, 66263.0, 67033.5, 67804.0, 68574.5, 69345.0, 70115.5, 70886.0, 71656.5, 72427.0, 73197.5, 73544.225, 73968.0, 74738.5, 75509.0, 76279.5, 76664.75, 76841.965, 76972.95, 77042.295, 77050.0])
        self.c0=CumulativeCurve(bin0,cnt0)

        bin1=np.array([14575.985,14576.985,17256.86,19647.4975,21010.8725,22272.75,23649.5,24804,25605,26115,26391,26755.5,27221.75,27642.75,28021.25,28362.25,28670.75,28959.75,29223.5,29471,29715,29950.5,30183.25,30403.25,30611.5,30818,31018.5,31211,31397,31576,31747.5,31914,32076.25,32242.75,32407.5,32562,32715.5,32868,33018,33164,33307.5,33451,33595,33743,33886,34026.5,34168.5,34308,34446.75,34584.25,34722.5,34859,34996,35136,35276.5,35409,35539.5,35679.5,35814.5,35950.5,36089,36222.5,36361.25,36502.25,36643.5,36781.5,36917.5,37056,37195.5,37334.5,37474.5,37620.5,37770.5,37928.5,38086.5,38241,38399.5,38563,38727.25,38888.25,39051,39221,39399.5,39580,39758.5,39943,40137.5,40335.5,40545.5,40763.5,40979,41200,41439,41700.5,41982.5,42272,42572.5,42896.5,43249.25,43644.25,44095.25,44461.25,44746,45271,46126.5,47326.25,48676.375,49908.02,51330.395,54080.01,57306.51])
        cnt1=np.array([0,7.705,77.05,208.035,385.25,770.5,1541,2311.5,3082,3505.775,3852.5,4623,5393.5,6164,6934.5,7705,8475.5,9246,10016.5,10787,11557.5,12328,13098.5,13869,14639.5,15410,16180.5,16951,17721.5,18492,19262.5,20033,20803.5,21574,22344.5,23115,23885.5,24656,25426.5,26197,26967.5,27738,28508.5,29279,30049.5,30820,31590.5,32361,33131.5,33902,34672.5,35443,36213.5,36984,37754.5,38525,39295.5,40066,40836.5,41607,42377.5,43148,43918.5,44689,45459.5,46230,47000.5,47771,48541.5,49312,50082.5,50853,51623.5,52394,53164.5,53935,54705.5,55476,56246.5,57017,57787.5,58558,59328.5,60099,60869.5,61640,62410.5,63181,63951.5,64722,65492.5,66263,67033.5,67804,68574.5,69345,70115.5,70886,71656.5,72427,73197.5,73544.225,73968,74738.5,75509,76279.5,76664.75,76841.965,76972.95,77042.295,77050])
        self.c1=CumulativeCurve(bin1,cnt1)
        
        bin2=np.array(([13518.,16287.11688998,20472.86439458,22294.37996457,23510.15002389,25073.60658299,26802.98698456,27977.42921701,28865.37255194,29272.7161479,29585.30808305,30231.49758389,30810.15666539,31341.29602761,31816.77718092,32260.99906094,32680.97158606,33086.02821552,33465.42044548,33841.60129278,34203.84238816,34561.91924171,34907.46038083,35256.31794369,35589.13329383,35916.34471335,36244.70716253,36572.15300699,36888.91409625,37200.41247054,37505.25213515,37821.43787439,38145.39470338,38460.7423153,38772.73441547,39075.09061622,39384.47537498,39690.3082822,39991.28400639,40293.7702579,40597.80639704,40902.51635751,41203.75947094,41515.6949657,41832.50054297,42148.03473808,42457.90218257,42771.55718087,43094.28246663,43412.99586879,43734.33671908,44047.38234227,44374.87278916,44700.44257185,45044.74190854,45393.96678409,45753.82923454,46113.39748246,46474.57215449,46845.7816563,47220.20158107,47603.22504056,47995.91817577,48411.3562984,48822.13655961,49271.82347458,49731.97346775,50213.86149666,50700.06412339,51188.58809832,51668.33635905,52141.20906743,52629.19906102,53107.46170065,53575.11659899,54019.19015399,54459.55703379,54879.19948762,55272.88843993,55664.44411283,56052.50002739,56432.26201126,56793.82770179,57154.3471283,57516.87888441,57868.68105175,58223.80183868,58587.70107368,58942.82424883,59287.02117695,59653.74432944,60009.43632725,60387.85829473,60772.3524544,61171.92093408,61594.97710253,62036.47798287,62505.90265919,63028.93794096,63563.5440198,64159.98493052,64449.25259393,64847.59758477,65668.3148236,66746.51613036,68445.34934504,69990.66210568,71154.07850769,72746.8212589,76674.43919624,79036.]))
        cnt2=np.array([0,21.6337,216.337,584.1099,1081.685,2163.37,4326.74,6490.11,8653.48,9843.3335,10816.85,12980.22,15143.59,17306.96,19470.33,21633.7,23797.07,25960.44,28123.81,30287.18,32450.55,34613.92,36777.29,38940.66,41104.03,43267.4,45430.77,47594.14,49757.51,51920.88,54084.25,56247.62,58410.99,60574.36,62737.73,64901.1,67064.47,69227.84,71391.21,73554.58,75717.95,77881.32,80044.69,82208.06,84371.43,86534.8,88698.17,90861.54,93024.91,95188.28,97351.65,99515.02,101678.39,103841.76,106005.13,108168.5,110331.87,112495.24,114658.61,116821.98,118985.35,121148.72,123312.09,125475.46,127638.83,129802.2,131965.57,134128.94,136292.31,138455.68,140619.05,142782.42,144945.79,147109.16,149272.53,151435.9,153599.27,155762.64,157926.01,160089.38,162252.75,164416.12,166579.49,168742.86,170906.23,173069.6,175232.97,177396.34,179559.71,181723.08,183886.45,186049.82,188213.19,190376.56,192539.93,194703.3,196866.67,199030.04,201193.41,203356.78,205520.15,206493.6665,207683.52,209846.89,212010.26,214173.63,215255.315,215752.8901,216120.663,216315.3663,216337])
        self.c2=CumulativeCurve(bin2,cnt2)

 
    def test_curveFromBin(self):
        """从连续的数值返回累积分布"""
        fname=os.path.join(os.path.dirname(__file__), '20200101.txt')
        with open(fname,'rt') as f:       
          v=[]
          reader=csv.reader(f)
          for row in reader:
              v.append(int(row[2]))
        v.sort()
        c=CumulativeCurve.curveFromBin(v,self.pb)
        self.assertTrue(cumulativeCurve_eq(c,self.c0))
    
    def test_curveFromBinCount0(self):
        """从区间计数返回累积分布"""    
        v=self.c0.binCount()
        c=CumulativeCurve.curveFromBinCount(v,self.pb,delta=0)
        self.assertTrue(cumulativeCurve_eq(c,self.c0))

    def test_curveFromBinCount1(self):
        """从区间计数返回累积分布"""    
        fname=os.path.join(os.path.dirname(__file__), '20200101.bc.txt')
        with open(fname,'rt') as f:       
          v=[]
          reader=csv.reader(f)
          for row in reader:
              v.append((float(row[1]),float(row[2])))
        c=CumulativeCurve.curveFromBinCount(v,self.pb,delta=1)
        self.assertTrue(cumulativeCurve_eq(c,self.c1))

    def test_max(self) :
        self.assertEqual(self.c0.max,58616)
      
    def test_min(self) :
        self.assertEqual(self.c0.min,13518)
      
    def test_count(self) :
        self.assertEqual(self.c0.count,77050)
      
    def test_p(self) :
        self.assertEqual(self.c0.p(5) ,26512)
        self.assertEqual(self.c0.p(25),31832)
        self.assertEqual(self.c0.p(75),39133)
        self.assertEqual(self.c0.p(95),44337.5)
      
    def test_median(self) :
        self.assertEqual(self.c0.median,35471)
        """正确值35471"""

    def test_cumulativeCount(self) :
        self.assertAlmostEqual(self.c0.cumulativeCount(10000),0)
        self.assertAlmostEqual(self.c0.cumulativeCount(30000),12106.43991416309)        
        self.assertAlmostEqual(self.c0.cumulativeCount(50000),76767.17664619259)
        self.assertAlmostEqual(self.c0.cumulativeCount(70000),77050)

    def test_cumulativePercentage(self) :
        self.assertAlmostEqual(self.c0.cumulativePercentage(10000),0)
        self.assertAlmostEqual(self.c0.cumulativePercentage(30000),0.1571244635193133)        
        self.assertAlmostEqual(self.c0.cumulativePercentage(50000),0.9963293529681062)
        self.assertAlmostEqual(self.c0.cumulativePercentage(70000),1)

    def test_rangeCount(self) :
        self.assertAlmostEqual(self.c0.rangeCount(10000,30000),12106.43991416309)
        self.assertAlmostEqual(self.c0.rangeCount(30000,50000),64660.7367320295)
        self.assertAlmostEqual(self.c0.rangeCount(50000,70000),282.8233538074128)

    def test_sum(self) :
        self.assertAlmostEqual(self.c0.sum,2732984199.675125)
        """正确值2732990752，相对误差-0.000240%"""
        
    def test_sum2(self) :
        self.assertAlmostEqual(self.c0.sum2,99207696622665.44)
        """正确值99199796939150，相对误差0.007963%"""
        
    def test_avg(self) :
        self.assertAlmostEqual(self.c0.avg,35470.2686525)
        """正确值35470.35369，相对误差-0.000240%"""
        
    def test_std(self) :
        self.assertAlmostEqual(self.c0.std,5425.493542840437)
        """正确值5415.479598，相对误差0.184913%"""
        
    def test_exportandimport(self) :
        fname=os.path.join(os.path.dirname(__file__), '20200101.csv')
        self.c0.exportCSV(fname) 
        c=CumulativeCurve.importCSV(fname)
        self.assertTrue(cumulativeCurve_eq(c,self.c0))
			
    def test_merge(self):
        """多条曲线合并"""
        fname=os.path.join(os.path.dirname(__file__), '20200101.txt')
        with open(fname,'rt') as f:       
          v01=[]
          reader=csv.reader(f)
          for row in reader:
              v01.append(int(row[2]))
        v01.sort()
        c01=CumulativeCurve.curveFromBin(v01,self.pb)
        fname=os.path.join(os.path.dirname(__file__), '20200111.txt')
        with open(fname,'rt') as f:       
          v11=[]
          reader=csv.reader(f)
          for row in reader:
              v11.append(int(row[2]))
        v11.sort()
        c11=CumulativeCurve.curveFromBin(v11,self.pb)
        fname=os.path.join(os.path.dirname(__file__), '20200121.txt')
        with open(fname,'rt') as f:       
          v21=[]
          reader=csv.reader(f)
          for row in reader:
              v21.append(int(row[2]))
        v21.sort()
        c21=CumulativeCurve.curveFromBin(v21,self.pb)
        curves=[c01.getCurve(),c11.getCurve(),c21.getCurve()]
        c=CumulativeCurve.merge(curves,self.pb)
        self.assertTrue(cumulativeCurve_eq(c,self.c2))
           
        import operator
        from functools import reduce 
        v=reduce(operator.concat,[v01,v11,v21])
        v.sort()
        c0=CumulativeCurve.curveFromBin(v,self.pb)
        print("curve: real {0} \n estimate {1}".format(c.getCurve(),c0.getCurve()))
            
        print("avg: real {0} estimate {1} relative err {2}%".format(np.mean(v),c.avg,round((c.avg-np.mean(v))/np.mean(v)*100,4)))
        print("std: real {0} estimate {1} relative err {2}%".format(np.std(v),c.std,round((c.std-np.std(v))/np.std(v)*100,4)))
        print("P25: real {0} estimate {1} relative err {2}%".format(np.percentile(v,25),c.p(25),round((c.p(25)-np.percentile(v,25))/np.percentile(v,25)*100,4)))
        print("median: real {0} estimate {1} relative err {2}%".format(np.median(v),c.median,round((c.median-np.median(v))/np.median(v)*100,4)))
        print("P75: real {0} estimate {1} relative err {2}%".format(np.percentile(v,75),c.p(75),round((c.p(75)-np.percentile(v,75))/np.percentile(v,75)*100,4)))

